{"ast":null,"code":"var _jsxFileName = \"/home/angela/Escritorio/ADALAB/ejercicios-de-Adalab/modulo-react/formulario-react/src/components/App.js\",\n    _s = $RefreshSig$();\n\n// Fichero src/components/App.js\nimport { useEffect, useState } from 'react';\nimport callToApi from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Estados\n  // Creamos characters para guardar los personajes respondidos por el API, por eso es un array vacío\n  const [shows, setShows] = useState([]); // Creamos searchName para gestionar el input de búsqueda, por eso es un string vacío\n\n  const [searchName, setSearchName] = useState(''); // useEffect\n\n  useEffect(() => {\n    // Aquí podemos poner código JS, por ejemplo podríamos llamar a callToApi dentro de un if\n    // Llamamos al API pasando por parámetros el searchName\n    callToApi(searchName).then(dataApi => {\n      // Cuando el API responde guardamos los personajes en el estado\n      setshows(shows);\n    }); // Este useEffect depende de searchName por eso ponemos [searchName]\n    // Cuando la usuaria cambia el searchName este useEffect se vuelve a ejecutar porque necesitamos llamar otra vez al API para obtener nuevos datos\n  }, [searchName]); // Eventos\n\n  const handleSearchName = ev => {\n    // Cuando la usuaria cambia el input guardamos su valor en el estado\n    setSearchName(ev.target.value);\n  }; // Renderizado */\n\n\n  const renderShows = () => {\n    // Pintamos el listado de personajes respondido por el API\n    return shows.map((show, index) => {\n      // El API no nos devuelve un id para cada personaje, por eso usamos el index que nos da el map\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Nombre: \", show.name]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Busca por el nombre de tu personaje favorito:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        id: \"name\",\n        value: searchName,\n        onChange: handleSearchName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Shows con el nombre: \", searchName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: renderShows()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"WKldSL1oQ3saRyIDgGUWZgEBEQ8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/angela/Escritorio/ADALAB/ejercicios-de-Adalab/modulo-react/formulario-react/src/components/App.js"],"names":["useEffect","useState","callToApi","App","shows","setShows","searchName","setSearchName","then","dataApi","setshows","handleSearchName","ev","target","value","renderShows","map","show","index","name"],"mappings":";;;AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,iBAAtB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AAEA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CAJgB,CAKhB;;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C,CANgB,CAQhB;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AAEA;AACAE,IAAAA,SAAS,CAACI,UAAD,CAAT,CAAsBE,IAAtB,CAA4BC,OAAD,IAAY;AACrC;AACAC,MAAAA,QAAQ,CAACN,KAAD,CAAR;AACD,KAHD,EAJc,CAQd;AACA;AACD,GAVQ,EAUN,CAACE,UAAD,CAVM,CAAT,CAVgB,CAsBhB;;AAEA,QAAMK,gBAAgB,GAAGC,EAAE,IAAI;AAC7B;AACAL,IAAAA,aAAa,CAACK,EAAE,CAACC,MAAH,CAAUC,KAAX,CAAb;AACD,GAHD,CAxBgB,CA6BhB;;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxB;AACA,WAAOX,KAAK,CAACY,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAChC;AACA,0BAAO;AAAA,+BAAyBD,IAAI,CAACE,IAA9B;AAAA,SAASD,KAAT;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAHM,CAAP;AAID,GAND;;AAQA,sBACE;AAAA,4BACE;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,EAAE,EAAC,MAAlC;AAAyC,QAAA,KAAK,EAAEZ,UAAhD;AAA4D,QAAA,QAAQ,EAAEK;AAAtE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAA,0CAA0BL,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA,gBAAKS,WAAW;AAAhB;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAnDD;;GAAMZ,G;;KAAAA,G;AAqDN,eAAeA,GAAf","sourcesContent":["// Fichero src/components/App.js\nimport { useEffect, useState } from 'react';\nimport callToApi from '../services/api';\n\nconst App = () => {\n  // Estados\n\n  // Creamos characters para guardar los personajes respondidos por el API, por eso es un array vacío\n  const [shows, setShows] = useState([]);\n  // Creamos searchName para gestionar el input de búsqueda, por eso es un string vacío\n  const [searchName, setSearchName] = useState('');\n\n  // useEffect\n\n  useEffect(() => {\n    // Aquí podemos poner código JS, por ejemplo podríamos llamar a callToApi dentro de un if\n\n    // Llamamos al API pasando por parámetros el searchName\n    callToApi(searchName).then((dataApi)=> {\n      // Cuando el API responde guardamos los personajes en el estado\n      setshows(shows);\n    });\n    // Este useEffect depende de searchName por eso ponemos [searchName]\n    // Cuando la usuaria cambia el searchName este useEffect se vuelve a ejecutar porque necesitamos llamar otra vez al API para obtener nuevos datos\n  }, [searchName]);\n\n  // Eventos\n\n  const handleSearchName = ev => {\n    // Cuando la usuaria cambia el input guardamos su valor en el estado\n    setSearchName(ev.target.value);\n  };\n\n  // Renderizado */\n\n  const renderShows = () => {\n    // Pintamos el listado de personajes respondido por el API\n    return shows.map((show, index) => {\n      // El API no nos devuelve un id para cada personaje, por eso usamos el index que nos da el map\n      return <li key={index}>Nombre: {show.name}</li>;\n    });\n  };\n\n  return (\n    <div>\n      <form>\n        <label htmlFor=\"name\">Busca por el nombre de tu personaje favorito:</label>\n        <input type=\"text\" name=\"name\" id=\"name\" value={searchName} onChange={handleSearchName} />\n      </form>\n      <h2>Shows con el nombre: {searchName}</h2>\n      <ul>{renderShows()}</ul>\n      \n      \n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}